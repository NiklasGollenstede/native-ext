##
# AppVeyor build automation:
# - application on Windows and Linux (x86 + x64)
# - signed extension dev-release
##

branches: { only: [ master ] } # build only on master
skip_non_tags: false # build on every commit push (or manually)
skip_tags: true # (commits create tags, so) don't build on tags
# appveyor automatically skips commits with `[skip ci]` in the message (title)


image: # build for windows and linux
  - Visual Studio 2015
  - Ubuntu

environment:
  AMO_JWT_ISSUER: "user:11844708:244" # generate at https://addons.mozilla.org/developers/addon/api/key/
  AMO_JWT_SECRET: # encrypt the secret with https://ci.appveyor.com/tools/encrypt
    secure: qK0cmL39oH20zxiczXoa9W/xovxGLKXDx/bgBGBfTSJ3mqw/smXs3nE1eHGaOpwgVb3yn1/d76USsqFD0+2K70ZIp1OpHNrs4pjw9oaIc2g=
  nodejs_version: "8.3.0"
  matrix:
    - nodejs_arch: "x64"
    - nodejs_arch: "x86"

init: # run before 'git clone'
  - cmd: git config --global core.autocrlf true # use \r\n line endings on windows
clone_depth: 1 # git clone argument

install:
  #
  # read version from package.json
  - ps: $env:package_version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version
  - ps: $env:manifest_version = "$($env:package_version)b$($env:APPVEYOR_BUILD_NUMBER)"
  - ps: Update-AppveyorBuild -Version "$env:manifest_version"
  #
  # install specified version of node.js
  # windows
  - ps: if ($isWindows) { Install-Product node $env:nodejs_version $env:nodejs_arch }
  # linux
  - sh: nvm install $nodejs_version # always x64
  - sh: | # install x86 libs and node.js
      if [ $nodejs_arch = 'x86' ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 libx32gcc-4.8-dev libc6-dev-i386 gcc-multilib g++-multilib
          wget -qO- https://nodejs.org/dist/v$nodejs_version/node-v$nodejs_version-linux-x86.tar.xz | \
          tar -Jx node-v$nodejs_version-linux-x86/bin/node
          mv node-v$nodejs_version-linux-x86/bin/node $(which node)
          node -e 'console.log("process.arch:", process.arch)'
      fi
  #
  # application build
  - cd application
  # install modules, build ffi
  - npm install
  # pack
  - npm run build && cd release
  - cmd: ren native-ext.exe native-ext-v%manifest_version%-win-%nodejs_arch%.exe
  - sh:  mv  native-ext     native-ext-v$manifest_version-linux-$nodejs_arch
  - cd ..
  # application build done
  - cd ..
  #
  # extension build
  - sh: |
      if [ $nodejs_arch = 'x64' ]; then
          #
          cd library && npm link && cd .. # must be available to link
          #
          cd extension
          mkdir artifacts
          #
          npm install # install and create a unsigned potential release version
          mv build/*.zip artifacts # move to artifacts for optional manual publish
          #
          npm run sign # create `-dev`-channel beta build, uses $APPVEYOR_BUILD_NUMBER for version
          mv build/*.xpi artifacts # move to artifacts for GitHub release
          #
          # invalidate current automatic update manifest, see https://gist.github.com/NiklasGollenstede/60aa2dc957f985eff2b7a2655ea1092b
          export update_url=$(node -e 'process.stdout.write(JSON.parse(require("fs").readFileSync("./build/manifest.json")).applications.gecko.update_url || "")')
          # must do it manually after publishing the release on GitHub
          echo wget --method=DELETE -qO- $update_url > artifacts/update.sh
          #
          cd ..
      fi

build: off # already done in install step

# grab renamed file from release/
artifacts:
  - path: application/release/*
  - path: extension/artifacts/*

deploy:
  release: v$(manifest_version) # rename manually to v$(package_version), which should be the name of the pushed tag
  description: build v$(manifest_version) # edit manually
  provider: GitHub
  auth_token: # created in GitHubs UI (public repo only), then encrypted in AppVoeyors UI
    secure: maxxggRkssdjgLe3OEQaVQXBOtFyHVit/AsK0gBqSn8Uwf2tg9w/dvAR5Ivyn27O
  artifact: /.*/
  draft: true # publish manually (or delete)
  prerelease: true
  force_update: false # name should be unique anyway
  on:
    branch: master                 # release from master branch only
    # don't restrict appveyor_repo_tag: if triggered manually on non-tag, still deploy
